# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LFC_simple.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import serial
from time import sleep
import threading
from queue import Queue
from serial.serialutil import EIGHTBITS, STOPBITS_ONE
from PyQt5 import QtCore, QtGui, QtWidgets
import serial.tools.list_ports
from time import sleep


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(360, 468)
        MainWindow.setMinimumSize(QtCore.QSize(360, 468))
        MainWindow.setMaximumSize(QtCore.QSize(360, 468))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.connection_group = QtWidgets.QGroupBox(self.centralwidget)
        self.connection_group.setGeometry(QtCore.QRect(10, 10, 181, 81))
        self.connection_group.setAlignment(QtCore.Qt.AlignCenter)
        self.connection_group.setObjectName("connection_group")
        self.connect_button = QtWidgets.QPushButton(self.connection_group)
        self.connect_button.setGeometry(QtCore.QRect(10, 20, 75, 23))
        self.connect_button.setObjectName("connect_button")
        self.disconnect_button = QtWidgets.QPushButton(self.connection_group)
        self.disconnect_button.setGeometry(QtCore.QRect(10, 50, 75, 23))
        self.disconnect_button.setObjectName("disconnect_button")
        self.com_choice = QtWidgets.QComboBox(self.connection_group)
        self.com_choice.setGeometry(QtCore.QRect(100, 20, 69, 21))
        self.com_choice.setObjectName("com_choice")
        self.connection_label = QtWidgets.QLabel(self.connection_group)
        self.connection_label.setGeometry(QtCore.QRect(100, 50, 71, 21))
        self.connection_label.setStyleSheet("color: rgb(255, 0, 4);")
        self.connection_label.setObjectName("connection_label")
        self.band_amp_commands = QtWidgets.QGroupBox(self.centralwidget)
        self.band_amp_commands.setEnabled(False)
        self.band_amp_commands.setGeometry(QtCore.QRect(10, 100, 181, 181))
        self.band_amp_commands.setAlignment(QtCore.Qt.AlignCenter)
        self.band_amp_commands.setObjectName("band_amp_commands")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.band_amp_commands)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(9, 20, 161, 111))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.band_amp_group = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.band_amp_group.setContentsMargins(0, 0, 0, 0)
        self.band_amp_group.setObjectName("band_amp_group")
        self.band_group = QtWidgets.QVBoxLayout()
        self.band_group.setSpacing(0)
        self.band_group.setObjectName("band_group")
        self.band_radio_1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_1.sizePolicy().hasHeightForWidth())
        self.band_radio_1.setSizePolicy(sizePolicy)
        self.band_radio_1.setCheckable(True)
        self.band_radio_1.setChecked(True)
        self.band_radio_1.setObjectName("band_radio_1")
        self.Bypass_group = QtWidgets.QButtonGroup(MainWindow)
        self.Bypass_group.setObjectName("Bypass_group")
        self.Bypass_group.addButton(self.band_radio_1)
        self.band_group.addWidget(self.band_radio_1)
        self.band_radio_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_3.sizePolicy().hasHeightForWidth())
        self.band_radio_3.setSizePolicy(sizePolicy)
        self.band_radio_3.setCheckable(True)
        self.band_radio_3.setObjectName("band_radio_3")
        self.Bypass_group.addButton(self.band_radio_3)
        self.band_group.addWidget(self.band_radio_3)
        self.band_radio_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_5.sizePolicy().hasHeightForWidth())
        self.band_radio_5.setSizePolicy(sizePolicy)
        self.band_radio_5.setCheckable(True)
        self.band_radio_5.setObjectName("band_radio_5")
        self.Bypass_group.addButton(self.band_radio_5)
        self.band_group.addWidget(self.band_radio_5)
        self.band_radio_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_7.sizePolicy().hasHeightForWidth())
        self.band_radio_7.setSizePolicy(sizePolicy)
        self.band_radio_7.setCheckable(True)
        self.band_radio_7.setObjectName("band_radio_7")
        self.Bypass_group.addButton(self.band_radio_7)
        self.band_group.addWidget(self.band_radio_7)
        self.band_amp_group.addLayout(self.band_group)
        self.line = QtWidgets.QFrame(self.horizontalLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.band_amp_group.addWidget(self.line)
        self.amp_group = QtWidgets.QVBoxLayout()
        self.amp_group.setSpacing(2)
        self.amp_group.setObjectName("amp_group")
        self.amp_radio_1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.amp_radio_1.sizePolicy().hasHeightForWidth())
        self.amp_radio_1.setSizePolicy(sizePolicy)
        self.amp_radio_1.setCheckable(True)
        self.amp_radio_1.setChecked(True)
        self.amp_radio_1.setObjectName("amp_radio_1")
        self.Amp_group = QtWidgets.QButtonGroup(MainWindow)
        self.Amp_group.setObjectName("Amp_group")
        self.Amp_group.addButton(self.amp_radio_1)
        self.amp_group.addWidget(self.amp_radio_1)
        self.amp_radio_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.amp_radio_2.sizePolicy().hasHeightForWidth())
        self.amp_radio_2.setSizePolicy(sizePolicy)
        self.amp_radio_2.setCheckable(True)
        self.amp_radio_2.setObjectName("amp_radio_2")
        self.Amp_group.addButton(self.amp_radio_2)
        self.amp_group.addWidget(self.amp_radio_2)
        self.amp_radio_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.amp_radio_3.sizePolicy().hasHeightForWidth())
        self.amp_radio_3.setSizePolicy(sizePolicy)
        self.amp_radio_3.setCheckable(True)
        self.amp_radio_3.setObjectName("amp_radio_3")
        self.Amp_group.addButton(self.amp_radio_3)
        self.amp_group.addWidget(self.amp_radio_3)
        self.band_amp_group.addLayout(self.amp_group)
        self.band_amp_button = QtWidgets.QPushButton(self.band_amp_commands)
        self.band_amp_button.setGeometry(QtCore.QRect(10, 140, 161, 31))
        self.band_amp_button.setObjectName("band_amp_button")
        self.misc_group = QtWidgets.QGroupBox(self.centralwidget)
        self.misc_group.setEnabled(False)
        self.misc_group.setGeometry(QtCore.QRect(200, 10, 151, 271))
        self.misc_group.setAlignment(QtCore.Qt.AlignCenter)
        self.misc_group.setObjectName("misc_group")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.misc_group)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 20, 131, 241))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.misc_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.misc_layout.setContentsMargins(0, 0, 0, 0)
        self.misc_layout.setSpacing(2)
        self.misc_layout.setObjectName("misc_layout")
        self.external_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.external_button.sizePolicy().hasHeightForWidth())
        self.external_button.setSizePolicy(sizePolicy)
        self.external_button.setObjectName("external_button")
        self.misc_layout.addWidget(self.external_button)
        self.firmware_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.firmware_button.sizePolicy().hasHeightForWidth())
        self.firmware_button.setSizePolicy(sizePolicy)
        self.firmware_button.setObjectName("firmware_button")
        self.misc_layout.addWidget(self.firmware_button)
        self.model_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.model_button.sizePolicy().hasHeightForWidth())
        self.model_button.setSizePolicy(sizePolicy)
        self.model_button.setObjectName("model_button")
        self.misc_layout.addWidget(self.model_button)
        self.SLS_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SLS_button.sizePolicy().hasHeightForWidth())
        self.SLS_button.setSizePolicy(sizePolicy)
        self.SLS_button.setObjectName("SLS_button")
        self.misc_layout.addWidget(self.SLS_button)
        self.tem_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tem_button.sizePolicy().hasHeightForWidth())
        self.tem_button.setSizePolicy(sizePolicy)
        self.tem_button.setObjectName("tem_button")
        self.misc_layout.addWidget(self.tem_button)
        self.LPM_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.LPM_button.sizePolicy().hasHeightForWidth())
        self.LPM_button.setSizePolicy(sizePolicy)
        self.LPM_button.setObjectName("LPM_button")
        self.misc_layout.addWidget(self.LPM_button)
        self.serial_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.serial_button.sizePolicy().hasHeightForWidth())
        self.serial_button.setSizePolicy(sizePolicy)
        self.serial_button.setObjectName("serial_button")
        self.misc_layout.addWidget(self.serial_button)
        self.command_output = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.command_output.setGeometry(QtCore.QRect(10, 290, 341, 101))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.command_output.setFont(font)
        self.command_output.setReadOnly(True)
        self.command_output.setObjectName("command_output")
        self.clear_button = QtWidgets.QPushButton(self.centralwidget)
        self.clear_button.setGeometry(QtCore.QRect(10, 390, 341, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clear_button.sizePolicy().hasHeightForWidth())
        self.clear_button.setSizePolicy(sizePolicy)
        self.clear_button.setObjectName("clear_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 360, 21))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAdvanced_Mode = QtWidgets.QAction(MainWindow)
        self.actionAdvanced_Mode.setCheckable(True)
        self.actionAdvanced_Mode.setChecked(False)
        self.actionAdvanced_Mode.setObjectName("actionAdvanced_Mode")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionRefresh_COM_Ports = QtWidgets.QAction(MainWindow)
        self.actionRefresh_COM_Ports.setObjectName("actionRefresh_COM_Ports")
        self.menuMenu.addAction(self.actionAdvanced_Mode)
        self.menuMenu.addAction(self.actionRefresh_COM_Ports)
        self.menuMenu.addSeparator()
        self.menuMenu.addAction(self.actionQuit)
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        self.clear_button.clicked.connect(self.command_output.clear)
        self.actionQuit.triggered.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Custom Command triggers for controller
        self.connect_button.clicked.connect(lambda: self.CONNECT())
        self.disconnect_button.clicked.connect(lambda: self.DISCONNECT())
        self.band_amp_button.clicked.connect(lambda: self.BANDAMP())
        self.external_button.clicked.connect(lambda: self.EXTERNALSWITCH())
        self.firmware_button.clicked.connect(lambda: self.GETFIRMWARE())
        self.model_button.clicked.connect(lambda: self.GETPN())
        self.SLS_button.clicked.connect(lambda: self.STARTLOD())
        self.tem_button.clicked.connect(lambda: self.GETTEMP())
        self.LPM_button.clicked.connect(lambda: self.STARTSLP())
        self.serial_button.clicked.connect(lambda: self.GETSERIAL())
        self.actionAdvanced_Mode.changed.connect(lambda: self.advMode())
        self.actionRefresh_COM_Ports.triggered.connect(lambda: self.ports())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Lexatys Simple Controller" + version))
        self.connection_group.setTitle(_translate("MainWindow", "Connection"))
        self.connect_button.setText(_translate("MainWindow", "Connect"))
        self.disconnect_button.setText(_translate("MainWindow", "Disconnect"))
        self.connection_label.setText(_translate("MainWindow", "Disconnected!"))
        self.band_amp_commands.setTitle(_translate("MainWindow", "Band and Amp Commands"))
        self.band_radio_1.setText(_translate("MainWindow", "Band 0"))
        self.band_radio_3.setText(_translate("MainWindow", "Band 2"))
        self.band_radio_5.setText(_translate("MainWindow", "Band 4"))
        self.band_radio_7.setText(_translate("MainWindow", "Band 6"))
        self.amp_radio_1.setText(_translate("MainWindow", " THRU"))
        self.amp_radio_2.setText(_translate("MainWindow", " 10 dB"))
        self.amp_radio_3.setText(_translate("MainWindow", "-20 dB"))
        self.band_amp_button.setText(_translate("MainWindow", "Send"))
        self.band_amp_button.setShortcut(_translate("MainWindow", "Return, Enter"))
        self.misc_group.setTitle(_translate("MainWindow", "Misc. Commands"))
        self.external_button.setText(_translate("MainWindow", "External Switch"))
        self.firmware_button.setText(_translate("MainWindow", "Firmware Version"))
        self.model_button.setText(_translate("MainWindow", "Model Number"))
        self.SLS_button.setText(_translate("MainWindow", "Safety Load State"))
        self.tem_button.setText(_translate("MainWindow", "Temperature Check"))
        self.LPM_button.setText(_translate("MainWindow", "Low Power Mode"))
        self.serial_button.setText(_translate("MainWindow", "Serial Number Check"))
        self.clear_button.setText(_translate("MainWindow", "Clear"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.actionAdvanced_Mode.setText(_translate("MainWindow", "Advanced Mode"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionRefresh_COM_Ports.setText(_translate("MainWindow", "Refresh COM Ports"))
        self.actionRefresh_COM_Ports.setShortcut(_translate("MainWindow", "Ctrl+R"))
    
    def setupU2(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(360, 564)
        MainWindow.setMinimumSize(QtCore.QSize(360, 564))
        MainWindow.setMaximumSize(QtCore.QSize(360, 564))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.connection_group = QtWidgets.QGroupBox(self.centralwidget)
        self.connection_group.setGeometry(QtCore.QRect(10, 10, 181, 81))
        self.connection_group.setAlignment(QtCore.Qt.AlignCenter)
        self.connection_group.setObjectName("connection_group")
        self.connect_button = QtWidgets.QPushButton(self.connection_group)
        self.connect_button.setGeometry(QtCore.QRect(10, 20, 75, 23))
        self.connect_button.setObjectName("connect_button")
        self.disconnect_button = QtWidgets.QPushButton(self.connection_group)
        self.disconnect_button.setGeometry(QtCore.QRect(10, 50, 75, 23))
        self.disconnect_button.setObjectName("disconnect_button")
        self.com_choice = QtWidgets.QComboBox(self.connection_group)
        self.com_choice.setGeometry(QtCore.QRect(100, 20, 69, 21))
        self.com_choice.setObjectName("com_choice")
        self.connection_label = QtWidgets.QLabel(self.connection_group)
        self.connection_label.setGeometry(QtCore.QRect(100, 50, 71, 21))
        self.connection_label.setStyleSheet("color: rgb(255, 0, 4);")
        self.connection_label.setObjectName("connection_label")
        self.band_amp_commands = QtWidgets.QGroupBox(self.centralwidget)
        self.band_amp_commands.setEnabled(False)
        self.band_amp_commands.setGeometry(QtCore.QRect(10, 100, 181, 281))
        self.band_amp_commands.setAlignment(QtCore.Qt.AlignCenter)
        self.band_amp_commands.setObjectName("band_amp_commands")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.band_amp_commands)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(9, 20, 161, 211))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.band_amp_group = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.band_amp_group.setContentsMargins(0, 0, 0, 0)
        self.band_amp_group.setObjectName("band_amp_group")
        self.band_group = QtWidgets.QVBoxLayout()
        self.band_group.setSpacing(0)
        self.band_group.setObjectName("band_group")
        self.band_radio_1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_1.sizePolicy().hasHeightForWidth())
        self.band_radio_1.setSizePolicy(sizePolicy)
        self.band_radio_1.setCheckable(True)
        self.band_radio_1.setChecked(True)
        self.band_radio_1.setObjectName("band_radio_1")
        self.Bypass_group = QtWidgets.QButtonGroup(MainWindow)
        self.Bypass_group.setObjectName("Bypass_group")
        self.Bypass_group.addButton(self.band_radio_1)
        self.band_group.addWidget(self.band_radio_1)
        self.band_radio_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_2.sizePolicy().hasHeightForWidth())
        self.band_radio_2.setSizePolicy(sizePolicy)
        self.band_radio_2.setCheckable(True)
        self.band_radio_2.setObjectName("band_radio_2")
        self.Bypass_group.addButton(self.band_radio_2)
        self.band_group.addWidget(self.band_radio_2)
        self.band_radio_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_3.sizePolicy().hasHeightForWidth())
        self.band_radio_3.setSizePolicy(sizePolicy)
        self.band_radio_3.setCheckable(True)
        self.band_radio_3.setObjectName("band_radio_3")
        self.Bypass_group.addButton(self.band_radio_3)
        self.band_group.addWidget(self.band_radio_3)
        self.band_radio_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_4.sizePolicy().hasHeightForWidth())
        self.band_radio_4.setSizePolicy(sizePolicy)
        self.band_radio_4.setCheckable(True)
        self.band_radio_4.setObjectName("band_radio_4")
        self.Bypass_group.addButton(self.band_radio_4)
        self.band_group.addWidget(self.band_radio_4)
        self.band_radio_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_5.sizePolicy().hasHeightForWidth())
        self.band_radio_5.setSizePolicy(sizePolicy)
        self.band_radio_5.setCheckable(True)
        self.band_radio_5.setObjectName("band_radio_5")
        self.Bypass_group.addButton(self.band_radio_5)
        self.band_group.addWidget(self.band_radio_5)
        self.band_radio_6 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_6.sizePolicy().hasHeightForWidth())
        self.band_radio_6.setSizePolicy(sizePolicy)
        self.band_radio_6.setCheckable(True)
        self.band_radio_6.setObjectName("band_radio_6")
        self.Bypass_group.addButton(self.band_radio_6)
        self.band_group.addWidget(self.band_radio_6)
        self.band_radio_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_7.sizePolicy().hasHeightForWidth())
        self.band_radio_7.setSizePolicy(sizePolicy)
        self.band_radio_7.setCheckable(True)
        self.band_radio_7.setObjectName("band_radio_7")
        self.Bypass_group.addButton(self.band_radio_7)
        self.band_group.addWidget(self.band_radio_7)
        self.band_radio_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.band_radio_8.sizePolicy().hasHeightForWidth())
        self.band_radio_8.setSizePolicy(sizePolicy)
        self.band_radio_8.setCheckable(True)
        self.band_radio_8.setObjectName("band_radio_8")
        self.Bypass_group.addButton(self.band_radio_8)
        self.band_group.addWidget(self.band_radio_8)
        self.bypass_radio_9 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bypass_radio_9.sizePolicy().hasHeightForWidth())
        self.bypass_radio_9.setSizePolicy(sizePolicy)
        self.bypass_radio_9.setCheckable(True)
        self.bypass_radio_9.setObjectName("bypass_radio_9")
        self.Bypass_group.addButton(self.bypass_radio_9)
        self.band_group.addWidget(self.bypass_radio_9)
        self.band_amp_group.addLayout(self.band_group)
        self.line = QtWidgets.QFrame(self.horizontalLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.band_amp_group.addWidget(self.line)
        self.amp_group = QtWidgets.QVBoxLayout()
        self.amp_group.setSpacing(2)
        self.amp_group.setObjectName("amp_group")
        self.amp_radio_1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.amp_radio_1.sizePolicy().hasHeightForWidth())
        self.amp_radio_1.setSizePolicy(sizePolicy)
        self.amp_radio_1.setCheckable(True)
        self.amp_radio_1.setChecked(True)
        self.amp_radio_1.setObjectName("amp_radio_1")
        self.Amp_group = QtWidgets.QButtonGroup(MainWindow)
        self.Amp_group.setObjectName("Amp_group")
        self.Amp_group.addButton(self.amp_radio_1)
        self.amp_group.addWidget(self.amp_radio_1)
        self.amp_radio_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.amp_radio_2.sizePolicy().hasHeightForWidth())
        self.amp_radio_2.setSizePolicy(sizePolicy)
        self.amp_radio_2.setCheckable(True)
        self.amp_radio_2.setObjectName("amp_radio_2")
        self.Amp_group.addButton(self.amp_radio_2)
        self.amp_group.addWidget(self.amp_radio_2)
        self.amp_radio_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.amp_radio_3.sizePolicy().hasHeightForWidth())
        self.amp_radio_3.setSizePolicy(sizePolicy)
        self.amp_radio_3.setCheckable(True)
        self.amp_radio_3.setObjectName("amp_radio_3")
        self.Amp_group.addButton(self.amp_radio_3)
        self.amp_group.addWidget(self.amp_radio_3)
        self.band_amp_group.addLayout(self.amp_group)
        self.band_amp_button = QtWidgets.QPushButton(self.band_amp_commands)
        self.band_amp_button.setGeometry(QtCore.QRect(10, 240, 161, 31))
        self.band_amp_button.setObjectName("band_amp_button")
        self.misc_group = QtWidgets.QGroupBox(self.centralwidget)
        self.misc_group.setEnabled(False)
        self.misc_group.setGeometry(QtCore.QRect(200, 10, 151, 371))
        self.misc_group.setAlignment(QtCore.Qt.AlignCenter)
        self.misc_group.setObjectName("misc_group")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.misc_group)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 20, 131, 341))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.misc_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.misc_layout.setContentsMargins(0, 0, 0, 0)
        self.misc_layout.setSpacing(2)
        self.misc_layout.setObjectName("misc_layout")
        self.external_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.external_button.sizePolicy().hasHeightForWidth())
        self.external_button.setSizePolicy(sizePolicy)
        self.external_button.setObjectName("external_button")
        self.misc_layout.addWidget(self.external_button)
        self.firmware_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.firmware_button.sizePolicy().hasHeightForWidth())
        self.firmware_button.setSizePolicy(sizePolicy)
        self.firmware_button.setObjectName("firmware_button")
        self.misc_layout.addWidget(self.firmware_button)
        self.model_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.model_button.sizePolicy().hasHeightForWidth())
        self.model_button.setSizePolicy(sizePolicy)
        self.model_button.setObjectName("model_button")
        self.misc_layout.addWidget(self.model_button)
        self.SLS_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SLS_button.sizePolicy().hasHeightForWidth())
        self.SLS_button.setSizePolicy(sizePolicy)
        self.SLS_button.setObjectName("SLS_button")
        self.misc_layout.addWidget(self.SLS_button)
        self.tem_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tem_button.sizePolicy().hasHeightForWidth())
        self.tem_button.setSizePolicy(sizePolicy)
        self.tem_button.setObjectName("tem_button")
        self.misc_layout.addWidget(self.tem_button)
        self.LPM_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.LPM_button.sizePolicy().hasHeightForWidth())
        self.LPM_button.setSizePolicy(sizePolicy)
        self.LPM_button.setObjectName("LPM_button")
        self.misc_layout.addWidget(self.LPM_button)
        self.serial_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.serial_button.sizePolicy().hasHeightForWidth())
        self.serial_button.setSizePolicy(sizePolicy)
        self.serial_button.setObjectName("serial_button")
        self.misc_layout.addWidget(self.serial_button)
        self.command_output = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.command_output.setGeometry(QtCore.QRect(10, 390, 341, 101))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.command_output.setFont(font)
        self.command_output.setReadOnly(True)
        self.command_output.setObjectName("command_output")
        self.clear_button = QtWidgets.QPushButton(self.centralwidget)
        self.clear_button.setGeometry(QtCore.QRect(10, 490, 341, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clear_button.sizePolicy().hasHeightForWidth())
        self.clear_button.setSizePolicy(sizePolicy)
        self.clear_button.setObjectName("clear_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 360, 21))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAdvanced_Mode = QtWidgets.QAction(MainWindow)
        self.actionAdvanced_Mode.setCheckable(True)
        self.actionAdvanced_Mode.setChecked(True)
        self.actionAdvanced_Mode.setObjectName("actionAdvanced_Mode")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionRefresh_COM_Ports = QtWidgets.QAction(MainWindow)
        self.actionRefresh_COM_Ports.setObjectName("actionRefresh_COM_Ports")
        self.menuMenu.addAction(self.actionAdvanced_Mode)
        self.menuMenu.addAction(self.actionRefresh_COM_Ports)
        self.menuMenu.addSeparator()
        self.menuMenu.addAction(self.actionQuit)
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateU2(MainWindow)
        self.clear_button.clicked.connect(self.command_output.clear)
        self.actionQuit.triggered.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Custom Command triggers for controller
        self.connect_button.clicked.connect(lambda: self.CONNECT())
        self.disconnect_button.clicked.connect(lambda: self.DISCONNECT())
        self.band_amp_button.clicked.connect(lambda: self.BANDAMP())
        self.external_button.clicked.connect(lambda: self.EXTERNALSWITCH())
        self.firmware_button.clicked.connect(lambda: self.GETFIRMWARE())
        self.model_button.clicked.connect(lambda: self.GETPN())
        self.SLS_button.clicked.connect(lambda: self.STARTLOD())
        self.tem_button.clicked.connect(lambda: self.GETTEMP())
        self.LPM_button.clicked.connect(lambda: self.STARTSLP())
        self.serial_button.clicked.connect(lambda: self.GETSERIAL())
        self.actionAdvanced_Mode.changed.connect(lambda: self.advMode())
        self.actionRefresh_COM_Ports.triggered.connect(lambda: self.ports())

    def retranslateU2(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Lexatys Simple Controller" + version))
        self.connection_group.setTitle(_translate("MainWindow", "Connection"))
        self.connect_button.setText(_translate("MainWindow", "Connect"))
        self.disconnect_button.setText(_translate("MainWindow", "Disconnect"))
        self.connection_label.setText(_translate("MainWindow", "Disconnected!"))
        self.band_amp_commands.setTitle(_translate("MainWindow", "Band and Amp Commands"))
        self.band_radio_1.setText(_translate("MainWindow", "Band 0"))
        self.band_radio_2.setText(_translate("MainWindow", "Band 1"))
        self.band_radio_3.setText(_translate("MainWindow", "Band 2"))
        self.band_radio_4.setText(_translate("MainWindow", "Band 3"))
        self.band_radio_5.setText(_translate("MainWindow", "Band 4"))
        self.band_radio_6.setText(_translate("MainWindow", "Band 5"))
        self.band_radio_7.setText(_translate("MainWindow", "Band 6"))
        self.band_radio_8.setText(_translate("MainWindow", "Band 7"))
        self.bypass_radio_9.setText(_translate("MainWindow", "BYPASS"))
        self.amp_radio_1.setText(_translate("MainWindow", " THRU"))
        self.amp_radio_2.setText(_translate("MainWindow", " 10 dB"))
        self.amp_radio_3.setText(_translate("MainWindow", "-20 dB"))
        self.band_amp_button.setText(_translate("MainWindow", "Send"))
        self.band_amp_button.setShortcut(_translate("MainWindow", "Return, Enter"))
        self.misc_group.setTitle(_translate("MainWindow", "Misc. Commands"))
        self.external_button.setText(_translate("MainWindow", "External Switch"))
        self.firmware_button.setText(_translate("MainWindow", "Firmware Version"))
        self.model_button.setText(_translate("MainWindow", "Model Number"))
        self.SLS_button.setText(_translate("MainWindow", "Safety Load State"))
        self.tem_button.setText(_translate("MainWindow", "Temperature Check"))
        self.LPM_button.setText(_translate("MainWindow", "Low Power Mode"))
        self.serial_button.setText(_translate("MainWindow", "Serial Number Check"))
        self.clear_button.setText(_translate("MainWindow", "Clear"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.actionAdvanced_Mode.setText(_translate("MainWindow", "Advanced Mode"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionRefresh_COM_Ports.setText(_translate("MainWindow", "Refresh COM Ports"))
        self.actionRefresh_COM_Ports.setShortcut(_translate("MainWindow", "Ctrl+R"))
        
    """Commands for Serial Communication Connection"""
    def CONNECT(self):
        """estabish connection"""
        com_id = self.com_choice.currentText()
        com_id = com_id.strip()
        self.connection(com_id)

    def connection(self, com_id_):
        try:
            global ser
            ser = serial.Serial(com_id_, 115200, timeout=1)
            self.command_output.appendPlainText("Successfully Connected to "+ str(com_id_))
            self.connection_label.setStyleSheet("color: rgb(0, 206, 34);")
            self.connection_label.setText("Connected!")
            self.misc_group.setEnabled(True)
            self.band_amp_commands.setEnabled(True)
        except Exception as e:
            print(e)
            self.command_output.appendPlainText("Failed to connect on port " + str(com_id_))

    def DISCONNECT(self):
        """close serial connection"""
        try:
            ser.close()
            self.command_output.appendPlainText("\nSerial Connection has been disconnected")
            self.connection_label.setStyleSheet("color: rgb(255, 0, 4);")
            self.connection_label.setText('Disconnected!')
            self.misc_group.setEnabled(False)
            self.band_amp_commands.setEnabled(False)
        except:
            self.command_output.appendPlainText("No Serial Connection found, please reconnect")
    
    def ports(self):
        self.com_choice.clear()
        ports = [comport.device for comport in serial.tools.list_ports.comports()]
        for item in ports:
            self.com_choice.addItem(item)


    def advMode(self):
        cCheck = 0
        cCom = self.com_choice.currentText()
        if self.actionAdvanced_Mode.isChecked():
            if self.connection_label.text() == "Connected!":
                cCheck = 1
            ui.setupU2(MainWindow)
            self.ports()
            if cCheck == 1:
                self.connection_label.setStyleSheet("color: rgb(0, 206, 34);")
                self.connection_label.setText("Connected!")
                self.com_choice.setCurrentText(cCom)
                try:
                    self.band_amp_commands.setEnabled(True)
                    self.misc_group.setEnabled(True)
                except:
                    pass
        else:
            if self.connection_label.text() == "Connected!":
                cCheck = 1
            ui.setupUi(MainWindow)
            self.ports()
            if cCheck == 1:
                self.connection_label.setStyleSheet("color: rgb(0, 206, 34);")
                self.connection_label.setText("Connected!")
                self.com_choice.setCurrentText(cCom)
                try:
                    self.band_amp_commands.setEnabled(True)
                    self.misc_group.setEnabled(True)
                except:
                    pass

    def BANDAMP(self):
        if self.actionAdvanced_Mode.isChecked():
            bands = {-2:"0", -3:"1", -4:"2", -5:"3", -6:"4", -7:"5", -8:"6", -9:"7", -10:""}
        else:
            bands = {-2:"0", -3:"2", -4:"4", -5:"6"}
        amps = {-2:"1", -3:"2", -4:"0"}
        band_choice = bands[self.Bypass_group.checkedId()]
        amp_choice = amps[self.Amp_group.checkedId()]
        default_command = "BND"
        if band_choice == "":
            default_command = "BYP"
        command = default_command + band_choice + amp_choice + "\n"
        b_command = bytes(command, 'utf-8')
        s.send(b_command)
        
    
    def GETTEMP(self):
        """get the unit's temp"""
        s.send(b'TMP?\n')
    
    def GETSERIAL(self):
        """get the unit's serial number"""
        s.send(b'SN?\n')

    def STARTSLP(self):
        """Switches Unit to Low Power State"""
        s.send(b'SLP\n')

    def GETFIRMWARE(self):
        """get the unit's firmware version"""
        s.send(b'FM?\n')
    
    def GETTEMP(self):
        """get the unit's temp"""
        s.send(b'TMP?\n')
    
    def EXTERNALSWITCH(self):
        """Switches unit to External Switch"""
        s.send(b'BYP3\n')
    
    def GETPN(self):
        """get the unit's part number"""
        s.send(b'PN?\n')

    def STARTLOD(self):
        """Switches unit into Safety Load State"""
        s.send(b'LOD\n')


class ccommands(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while True:
            command = q.get(block=True, timeout=None)
            try:
                ser.write(command)
                data = ser.readline()
            except NameError:
                data = "No COM Port set! Connect to a COM Port"
            textq.put(data)

class survey(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        oldports = []
        while True:
            ports = [comport.device for comport in serial.tools.list_ports.comports()]
            if ports != oldports:
                ui.com_choice.clear()
                diffCOM = list(set(ports) ^ set(oldports))
                for item in ports:
                    ui.com_choice.addItem(item)
                ui.com_choice.setCurrentText(diffCOM[0])
                oldports = ports
            else:
                pass

class LSCommands():
    def send(self, command):
        q.put(command)
        text = (textq.get())
        try:
            text = text.decode(encoding='UTF-8')
            text = text.split("\n")
            text = text[0]
        except AttributeError:
            pass
        shelves = {
            "BND02":"Band 0 and 10 dB ampilfier selected",
            "BND00":"Band 0 and -20 dB ampilfier selected",
            "BND01":"Band 0 and THRU ampilfier selected",
            "BND12":"Band 1 and 10 dB ampilfier selected",
            "BND10":"Band 1 and -20 dB ampilfier selected",
            "BND11":"Band 1 and THRU ampilfier selected",
            "BND22":"Band 2 and 10 dB ampilfier selected",
            "BND20":"Band 2 and -20 dB ampilfier selected",
            "BND21":"Band 2 and THRU ampilfier selected",
            "BND32":"Band 3 and 10 dB ampilfier selected",
            "BND30":"Band 3 and -20 dB ampilfier selected",
            "BND31":"Band 3 and THRU ampilfier selected",
            "BND42":"Band 4 and 10 dB ampilfier selected",
            "BND40":"Band 4 and -20 dB ampilfier selected",
            "BND41":"Band 4 and THRU ampilfier selected",
            "BND52":"Band 5 and 10 dB ampilfier selected",
            "BND50":"Band 5 and -20 dB ampilfier selected",
            "BND51":"Band 5 and THRU ampilfier selected",
            "BND62":"Band 6 and 10 dB ampilfier selected",
            "BND60":"Band 6 and -20 dB ampilfier selected",
            "BND61":"Band 6 and THRU ampilfier selected",
            "BND72":"Band 7 and 10 dB ampilfier selected",
            "BND70":"Band 7 and -20 dB ampilfier selected",
            "BND71":"Band 7 and THRU ampilfier selected",
            "BYP2":"Bypass and 10 dB ampilfier selected",
            "BYP0":"Bypass and -20 dB ampilfier selected",
            "BYP1":"Bypass and THRU ampilfier selected",
            "BYP3":"External Switch is now active",
            "LOD":"Unit now in Safety Load State",
            "SLP":"Unit is now in Low Power State"
        }
        index = shelves.keys()
        if text in index:
            context = shelves[text]
            ui.command_output.appendPlainText(context)
        else:
            ui.command_output.appendPlainText(text)
        

if __name__ == "__main__":
    import sys
    version = " (1.3b)"
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    trigger = threading.Event()
    textq = Queue(maxsize=1)
    q = Queue(maxsize=1)
    c = ccommands()
    c.daemon = True
    c.start()
    surv = survey()
    surv.daemon = True
    surv.start()
    s = LSCommands()
    sys.exit(app.exec_())
